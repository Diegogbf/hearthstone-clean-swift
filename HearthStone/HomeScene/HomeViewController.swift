//
//  HomeViewController.swift
//  HearthStone
//
//  Created by Diego Gomes on 25/04/20.
//  Copyright (c) 2020 Diego Gomes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
    func displayFilters(viewModel: Home.FetchFilters.ViewModel)
}

class HomeViewController: UITableViewController, HomeDisplayLogic {
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var filters = Home.FetchFilters.ViewModel(items: [])
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        self.interactor = interactor
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        tableView.register(CategoryTableViewCell.self)
    }
    
    // MARK: Routing
    func showCardsForFilter() {
        router?.routeToCards()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        fetchFilters()
    }
    
    override func loadView() {
        super.loadView()
        title = "Hearthstone"
        view.backgroundColor = .white
    }
    
    // MARK: Do something
    func fetchFilters() {
        interactor?.fetchFilters()
    }
    
    func displayFilters(viewModel: Home.FetchFilters.ViewModel) {
        filters = viewModel
        tableView.reloadData()
    }
}

extension HomeViewController {
    override func numberOfSections(in tableView: UITableView) -> Int {
        return filters.items.count
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(CategoryTableViewCell.self, indexPath: indexPath)
        cell.set(cards: filters.items[indexPath.section].categories)
        return cell
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 104
    }
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let label = UILabel()
        label.text = "   " + filters.items[section].filterName
        label.backgroundColor = .white
        return label
    }
}

