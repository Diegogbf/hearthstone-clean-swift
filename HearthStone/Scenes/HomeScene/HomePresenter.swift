//
//  HomePresenter.swift
//  HearthStone
//
//  Created by Diego Gomes on 25/04/20.
//  Copyright (c) 2020 Diego Gomes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
    func presentFilters(response: Home.FetchFilters.Response)
}

class HomePresenter: HomePresentationLogic, WorkerPresentationFeedback {
    weak var viewController: (HomeDisplayLogic & WorkerPresentationFeedback)?
    
    func presentFilters(response: Home.FetchFilters.Response) {
        viewController?.displayFilters(viewModel: convertToViewModel(response: response))
    }
    
    func load(showLoader: Bool) {
        viewController?.load(showLoader: showLoader)
    }
    
    func showError(message: String) {
        viewController?.showError(message: message)
    }
    
    private func convertToViewModel(response: Home.FetchFilters.Response) -> Home.FetchFilters.ViewModel {
        let classes = Home.Item(
            filterName: "Classes",
            categories: (response.classes ?? []).map {
                Home.Card(name: $0)
            }
        )
        
        let types = Home.Item(
            filterName: "Types",
            categories: (response.types ?? []).map {
                Home.Card(name: $0)
            }
        )
        
        let factions = Home.Item(
            filterName: "Factions",
            categories: (response.factions ?? []).map {
                Home.Card(name: $0)
            }
        )
        
        let qualities = Home.Item(
            filterName: "Qualities",
            categories: (response.qualities ?? []).map {
                Home.Card(name: $0)
            }
        )
        
        let races = Home.Item(
            filterName: "Races",
            categories: (response.races ?? []).map {
                Home.Card(name: $0)
            }
        )

        return Home.FetchFilters.ViewModel(items: [classes, types, factions, qualities, races])
    }
}
